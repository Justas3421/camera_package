// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

/// Pigeon equivalent of [CameraLensDirection].
typedef NS_ENUM(NSUInteger, PlatformCameraLensDirection) {
  PlatformCameraLensDirectionFront = 0,
  PlatformCameraLensDirectionBack = 1,
  PlatformCameraLensDirectionExternal = 2,
};

/// Wrapper for PlatformCameraLensDirection to allow for nullability.
@interface PlatformCameraLensDirectionBox : NSObject
@property(nonatomic, assign) PlatformCameraLensDirection value;
- (instancetype)initWithValue:(PlatformCameraLensDirection)value;
@end

/// Pigeon equivalent of [DeviceOrientation].
typedef NS_ENUM(NSUInteger, PlatformDeviceOrientation) {
  PlatformDeviceOrientationPortraitUp = 0,
  PlatformDeviceOrientationPortraitDown = 1,
  PlatformDeviceOrientationLandscapeLeft = 2,
  PlatformDeviceOrientationLandscapeRight = 3,
};

/// Wrapper for PlatformDeviceOrientation to allow for nullability.
@interface PlatformDeviceOrientationBox : NSObject
@property(nonatomic, assign) PlatformDeviceOrientation value;
- (instancetype)initWithValue:(PlatformDeviceOrientation)value;
@end

/// Pigeon equivalent of [ExposureMode].
typedef NS_ENUM(NSUInteger, PlatformExposureMode) {
  PlatformExposureModeAuto = 0,
  PlatformExposureModeLocked = 1,
};

/// Wrapper for PlatformExposureMode to allow for nullability.
@interface PlatformExposureModeBox : NSObject
@property(nonatomic, assign) PlatformExposureMode value;
- (instancetype)initWithValue:(PlatformExposureMode)value;
@end

/// Pigeon equivalent of [FocusMode].
typedef NS_ENUM(NSUInteger, PlatformFocusMode) {
  PlatformFocusModeAuto = 0,
  PlatformFocusModeLocked = 1,
};

/// Wrapper for PlatformFocusMode to allow for nullability.
@interface PlatformFocusModeBox : NSObject
@property(nonatomic, assign) PlatformFocusMode value;
- (instancetype)initWithValue:(PlatformFocusMode)value;
@end

/// Pigeon equivalent of [ResolutionPreset].
typedef NS_ENUM(NSUInteger, PlatformResolutionPreset) {
  PlatformResolutionPresetLow = 0,
  PlatformResolutionPresetMedium = 1,
  PlatformResolutionPresetHigh = 2,
  PlatformResolutionPresetVeryHigh = 3,
  PlatformResolutionPresetUltraHigh = 4,
  PlatformResolutionPresetMax = 5,
};

/// Wrapper for PlatformResolutionPreset to allow for nullability.
@interface PlatformResolutionPresetBox : NSObject
@property(nonatomic, assign) PlatformResolutionPreset value;
- (instancetype)initWithValue:(PlatformResolutionPreset)value;
@end

/// Pigeon equivalent of [ImageFormatGroup].
typedef NS_ENUM(NSUInteger, PlatformImageFormatGroup) {
  /// The default for Android.
  PlatformImageFormatGroupYuv420 = 0,
  PlatformImageFormatGroupJpeg = 1,
  PlatformImageFormatGroupNv21 = 2,
};

/// Wrapper for PlatformImageFormatGroup to allow for nullability.
@interface PlatformImageFormatGroupBox : NSObject
@property(nonatomic, assign) PlatformImageFormatGroup value;
- (instancetype)initWithValue:(PlatformImageFormatGroup)value;
@end

/// Pigeon equivalent of [FlashMode].
typedef NS_ENUM(NSUInteger, PlatformFlashMode) {
  PlatformFlashModeOff = 0,
  PlatformFlashModeAuto = 1,
  PlatformFlashModeAlways = 2,
  PlatformFlashModeTorch = 3,
};

/// Wrapper for PlatformFlashMode to allow for nullability.
@interface PlatformFlashModeBox : NSObject
@property(nonatomic, assign) PlatformFlashMode value;
- (instancetype)initWithValue:(PlatformFlashMode)value;
@end

@class PlatformCameraDescription;
@class PlatformCameraState;
@class PlatformSize;
@class PlatformPoint;
@class PlatformMediaSettings;

/// Pigeon equivalent of [CameraDescription].
@interface PlatformCameraDescription : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithName:(NSString *)name
    lensDirection:(PlatformCameraLensDirection)lensDirection
    sensorOrientation:(NSInteger )sensorOrientation;
@property(nonatomic, copy) NSString * name;
@property(nonatomic, assign) PlatformCameraLensDirection lensDirection;
@property(nonatomic, assign) NSInteger  sensorOrientation;
@end

/// Data needed for [CameraInitializedEvent].
@interface PlatformCameraState : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPreviewSize:(PlatformSize *)previewSize
    exposureMode:(PlatformExposureMode)exposureMode
    focusMode:(PlatformFocusMode)focusMode
    exposurePointSupported:(BOOL )exposurePointSupported
    focusPointSupported:(BOOL )focusPointSupported;
@property(nonatomic, strong) PlatformSize * previewSize;
@property(nonatomic, assign) PlatformExposureMode exposureMode;
@property(nonatomic, assign) PlatformFocusMode focusMode;
@property(nonatomic, assign) BOOL  exposurePointSupported;
@property(nonatomic, assign) BOOL  focusPointSupported;
@end

/// Pigeon equivalent of [Size].
@interface PlatformSize : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithWidth:(double )width
    height:(double )height;
@property(nonatomic, assign) double  width;
@property(nonatomic, assign) double  height;
@end

/// Pigeon equivalent of [Point].
@interface PlatformPoint : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithX:(double )x
    y:(double )y;
@property(nonatomic, assign) double  x;
@property(nonatomic, assign) double  y;
@end

/// Pigeon equivalent of [MediaSettings].
@interface PlatformMediaSettings : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithResolutionPreset:(PlatformResolutionPreset)resolutionPreset
    fps:(nullable NSNumber *)fps
    videoBitrate:(nullable NSNumber *)videoBitrate
    audioBitrate:(nullable NSNumber *)audioBitrate
    enableAudio:(BOOL )enableAudio;
@property(nonatomic, assign) PlatformResolutionPreset resolutionPreset;
@property(nonatomic, strong, nullable) NSNumber * fps;
@property(nonatomic, strong, nullable) NSNumber * videoBitrate;
@property(nonatomic, strong, nullable) NSNumber * audioBitrate;
@property(nonatomic, assign) BOOL  enableAudio;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *nullGetMessagesCodec(void);

/// Handles calls from Dart to the native side.
@protocol CameraApi
/// Returns the list of available cameras.
///
/// @return `nil` only when `error != nil`.
- (nullable NSArray<PlatformCameraDescription *> *)getAvailableCamerasWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Creates a new camera with the given name and settings and returns its ID.
- (void)createCameraName:(NSString *)cameraName mediaSettings:(PlatformMediaSettings *)mediaSettings completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Initializes the camera with the given ID for the given image format.
- (void)initializeImageFormat:(PlatformImageFormatGroup)imageFormat error:(FlutterError *_Nullable *_Nonnull)error;
/// Disposes of the camera with the given ID.
- (void)disposeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Locks the camera with the given ID to the given orientation.
- (void)lockCaptureOrientationOrientation:(PlatformDeviceOrientation)orientation error:(FlutterError *_Nullable *_Nonnull)error;
/// Unlocks the orientation for the camera with the given ID.
- (void)unlockCaptureOrientationWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Takes a picture on the camera with the given ID and returns a path to the
/// resulting file.
- (void)takePictureWithCompletion:(void (^)(NSString *_Nullable, FlutterError *_Nullable))completion;
/// Starts recording a video on the camera with the given ID.
- (void)startVideoRecordingEnableStream:(BOOL)enableStream error:(FlutterError *_Nullable *_Nonnull)error;
/// Ends video recording on the camera with the given ID and returns the path
/// to the resulting file.
///
/// @return `nil` only when `error != nil`.
- (nullable NSString *)stopVideoRecordingWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Pauses video recording on the camera with the given ID.
- (void)pauseVideoRecordingWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Resumes previously paused video recording on the camera with the given ID.
- (void)resumeVideoRecordingWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Begins streaming frames from the camera.
- (void)startImageStreamWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Stops streaming frames from the camera.
- (void)stopImageStreamWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the flash mode of the camera with the given ID.
- (void)setFlashModeFlashMode:(PlatformFlashMode)flashMode completion:(void (^)(FlutterError *_Nullable))completion;
/// Sets the exposure mode of the camera with the given ID.
- (void)setExposureModeExposureMode:(PlatformExposureMode)exposureMode completion:(void (^)(FlutterError *_Nullable))completion;
/// Sets the exposure point of the camera with the given ID.
///
/// A null value resets to the default exposure point.
- (void)setExposurePointPoint:(nullable PlatformPoint *)point completion:(void (^)(FlutterError *_Nullable))completion;
- (void)setFocusPointPoint:(nullable PlatformPoint *)point completion:(void (^)(FlutterError *_Nullable))completion;
/// Returns the minimum exposure offset of the camera with the given ID.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMinExposureOffsetWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the maximum exposure offset of the camera with the given ID.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMaxExposureOffsetWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the exposure step size of the camera with the given ID.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getExposureOffsetStepSizeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the exposure offset of the camera with the given ID and returns the
/// actual exposure offset.
- (void)setExposureOffsetOffset:(double)offset completion:(void (^)(NSNumber *_Nullable, FlutterError *_Nullable))completion;
/// Sets the focus mode of the camera with the given ID.
- (void)setFocusModeFocusMode:(PlatformFocusMode)focusMode error:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the focus point of the camera with the given ID.
///
/// A null value resets to the default focus point.
- (void)setFocusDistanceDistance:(nullable NSNumber *)distance completion:(void (^)(FlutterError *_Nullable))completion;
/// Returns the maximum zoom level of the camera with the given ID.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMaxZoomLevelWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Returns the minimum zoom level of the camera with the given ID.
///
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)getMinZoomLevelWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Sets the zoom level of the camera with the given ID.
- (void)setZoomLevelZoom:(double)zoom completion:(void (^)(FlutterError *_Nullable))completion;
/// Pauses streaming of preview frames.
- (void)pausePreviewWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Resumes previously paused streaming of preview frames.
- (void)resumePreviewWithError:(FlutterError *_Nullable *_Nonnull)error;
/// Changes the camera while recording video.
///
/// This should be called only while video recording is active.
- (void)setDescriptionWhileRecordingDescription:(NSString *)description error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpCameraApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraApi> *_Nullable api);

extern void SetUpCameraApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CameraApi> *_Nullable api, NSString *messageChannelSuffix);


/// Handles calls from native side to Dart that are not camera-specific.
@interface CameraGlobalEventApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
/// Called when the device's physical orientation changes.
- (void)deviceOrientationChangedOrientation:(PlatformDeviceOrientation)orientation completion:(void (^)(FlutterError *_Nullable))completion;
@end


/// Handles device-specific calls from native side to Dart.
@interface CameraEventApi : NSObject
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger;
- (instancetype)initWithBinaryMessenger:(id<FlutterBinaryMessenger>)binaryMessenger messageChannelSuffix:(nullable NSString *)messageChannelSuffix;
/// Called when the camera is initialized.
- (void)initializedInitialState:(PlatformCameraState *)initialState completion:(void (^)(FlutterError *_Nullable))completion;
/// Called when an error occurs in the camera.
- (void)errorMessage:(NSString *)message completion:(void (^)(FlutterError *_Nullable))completion;
/// Called when the camera closes.
- (void)closedWithCompletion:(void (^)(FlutterError *_Nullable))completion;
@end

NS_ASSUME_NONNULL_END
